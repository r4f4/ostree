# Test the deploy --stage functionality; first, we stage a deployment
# reboot, and validate that it worked.

# for now, until the preset propagates down
- name: Start up path unit
  shell: |
    set -xeuo pipefail
    systemctl enable --now ostree-finalize-staged.path
- name: Write staged-deploy commit
  shell: |
    set -xeuo pipefail
    export OSTREE_SYSROOT_DEBUG="test-staged-path"
    cd /ostree/repo/tmp
    # https://github.com/ostreedev/ostree/issues/1569
    ostree checkout -H ${commit} t
    ostree commit --no-bindings --parent="${commit}" -b staged-deploy -I --consume t
    newcommit=$(ostree rev-parse staged-deploy)
    orig_mtime=$(stat -c '%.Y' /sysroot/ostree/deploy)
    systemctl show -p SubState ostree-finalize-staged.path | grep -q waiting
    systemctl show -p ActiveState ostree-finalize-staged.service | grep -q inactive
    systemctl show -p TriggeredBy ostree-finalize-staged.service | grep -q path
    ostree admin deploy --stage staged-deploy | tee out.txt
    if ! grep -q 'test-staged-path: Not running' out.txt; then
      cat out.txt
      exit 1
    fi
    systemctl show -p SubState ostree-finalize-staged.path | grep running
    systemctl show -p ActiveState ostree-finalize-staged.service | grep active
    new_mtime=$(stat -c '%.Y' /sysroot/ostree/deploy)
    test "${orig_mtime}" != "${new_mtime}"
    test -f /run/ostree/staged-deployment
    ostree refs | grep -E -e '^ostree/' | while read ref; do
      if test "$(ostree rev-parse ${ref})" = "${newcommit}"; then
        touch deployment-ref-found
      fi
    done
    test -f deployment-ref-found
    rm deployment-ref-found
    if ostree admin pin 0 2>err.txt; then
      echo "Pinned staged deployment"; exit 1
    fi
    grep -qFe 'Cannot pin staged deployment' err.txt
  environment:
    commit: "{{ rpmostree_status['deployments'][0]['checksum'] }}"
- include_tasks: ../tasks/reboot.yml
- name: Check that deploy-staged service worked
  shell: |
    set -xeuo pipefail
    rpm-ostree status
    # Assert that the previous boot had a journal entry for it
    journalctl -b "-1" -u ostree-finalize-staged.service | grep -q -e 'Transaction complete'
    # And there should not be a staged deployment
    test '!' -f /run/ostree/staged-deployment

- name: Upgrade with staging
  shell: |
    set -xeuo pipefail
    test '!' -f /run/ostree/staged-deployment
    ostree admin deploy --stage staged-deploy
    test -f /run/ostree/staged-deployment
    origcommit=$(ostree rev-parse staged-deploy)
    cd /ostree/repo/tmp
    ostree checkout -H "${origcommit}" t
    ostree commit --no-bindings --parent="${origcommit}" -b staged-deploy -I --consume t
    newcommit=$(ostree rev-parse staged-deploy)
    env OSTREE_EX_STAGE_DEPLOYMENTS=1 ostree admin upgrade >out.txt
    test -f /run/ostree/staged-deployment
    # Debating bouncing back out to Ansible for this
    firstdeploycommit=$(rpm-ostree status |grep 'Commit:' |head -1|sed -e 's,^ *Commit: *,,')
    test "${firstdeploycommit}" = "${newcommit}"
    # Cleanup
    rpm-ostree cleanup -rp
- import_tasks: ../tasks/query-host.yml

# Ensure we can unstage
- name: Write staged-deploy commit, then unstage
  shell: |
    set -xeuo pipefail
    ostree admin deploy --stage staged-deploy
    ostree admin status > status.txt
    grep -qFe '(staged)' status.txt
    test -f /run/ostree/staged-deployment
    ostree admin undeploy 0
    ostree admin status > status.txt
    grep -vqFe '(staged)' status.txt
    test '!' -f /run/ostree/staged-deployment

- name: Staged should be overwritten by non-staged as first
  shell: |
    set -xeuo pipefail
    ostree admin deploy --stage staged-deploy
    test -f /run/ostree/staged-deployment
    ostree --repo=/ostree/repo refs --create nonstaged-deploy "${commit}"
    ostree admin deploy nonstaged-deploy
    ostree admin status > status.txt
    grep -vqFe '(staged)' status.txt
    test '!' -f /run/ostree/staged-deployment
    ostree admin undeploy 0
  environment:
    commit: "{{ rpmostree_status['deployments'][0]['checksum'] }}"

- name: Staged is retained when pushing rollback
  shell: |
    set -xeuo pipefail
    ostree admin deploy --stage staged-deploy
    test -f /run/ostree/staged-deployment
    ostree admin deploy --retain-pending --not-as-default nonstaged-deploy
    test -f /run/ostree/staged-deployment
    ostree admin status > status.txt
    grep -qFe '(staged)' status.txt
    ostree admin undeploy 0
    ostree admin undeploy 1
  environment:
    commit: "{{ rpmostree_status['deployments'][0]['checksum'] }}"

- name: Previous version is retained during staged
  shell: |
    set -xeuo pipefail
    ostree --repo=/ostree/repo refs --create nonstaged-deploy "${commit}"
    ostree admin deploy nonstaged-deploy
    ostree admin deploy --stage --retain-previous-version staged-deploy
    test -f /run/ostree/staged-deployment
    ostree admin status > status.txt
    grep -qFe '(staged)' status.txt
  environment:
    commit: "{{ rpmostree_status['deployments'][0]['checksum'] }}"
- include_tasks: ../tasks/reboot.yml
- name: Check that previous version was kept
  shell: |
    set -xeuo pipefail
    rpm-ostree status
    # Assert that the previous boot had a journal entry for it
    journalctl -b "-1" -u ostree-finalize-staged.service | grep -q -e 'Transaction complete'
    # And there should not be a staged deployment
    test '!' -f /run/ostree/staged-deployment
    ostree admin status > status.txt
    test $(grep -Fce 'Version: ' status.txt) == 1

- name: Cleanup refs
  shell: ostree refs --delete staged-deploy nonstaged-deploy 
